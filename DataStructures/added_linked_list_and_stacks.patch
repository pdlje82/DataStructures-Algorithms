Index: 10 StringReverser.py
===================================================================
--- 10 StringReverser.py	(revision f1046cc95e650456bc2b46061c124bdb245204bb)
+++ 10 StringReverser.py	(revision f1046cc95e650456bc2b46061c124bdb245204bb)
@@ -1,56 +0,0 @@
-# Code
-
-def string_reverser(our_string):
-    """
-    Reverse the input string
-
-    Args:
-       our_string(string): String to be reversed
-    Returns:
-       string: The reversed string
-    """
-
-    # TODO: Write your solution here
-    str_index = len(our_string) - 1
-    new_str = ""
-
-    while str_index >= 0:
-        new_str += our_string[str_index]
-        str_index -= 1
-    return(new_str)
-
-
-# Test Cases
-
-# print ("Pass" if ('retaw' == string_reverser('water')) else "Fail")
-# print ("Pass" if ('!noitalupinam gnirts gnicitcarP' == string_reverser('Practicing string manipulation!')) else "Fail")
-# print ("Pass" if ('3432 :si edoc esuoh ehT' == string_reverser('The house code is: 2343')) else "Fail")
-
-
-# Code
-
-def anagram_checker(str1, str2):
-    """
-    Check if the input strings are anagrams of each other
-
-    Args:
-       str1(string),str2(string): Strings to be checked
-    Returns:
-       bool: Indicates whether strings are anagrams
-    """
-
-    # TODO: Write your solution here
-    str1 = (str1.lower().replace(" ", ""))
-    str2 = (str2.lower().replace(" ", ""))
-    if sorted(str1) == sorted(str2):
-        return True
-    else:
-        return False
-
-# Test Cases
-
-print ("Pass" if not (anagram_checker('water','waiter')) else "Fail")
-print ("Pass" if anagram_checker('Dormitory','Dirty room') else "Fail")
-print ("Pass" if anagram_checker('Slot machines', 'Cash lost in me') else "Fail")
-print ("Pass" if not (anagram_checker('A gentleman','Elegant men')) else "Fail")
-print ("Pass" if anagram_checker('Time and tide wait for no man','Notified madman into water') else "Fail")
\ No newline at end of file
Index: 11_LinkedList.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 11_LinkedList.py	(date 1557590876207)
+++ 11_LinkedList.py	(date 1557590876207)
@@ -0,0 +1,121 @@
+class Node:
+    def __init__(self, value):
+        self.value = value
+        self.next = None
+
+head = Node(2)
+head.next = Node(1)
+
+head.next.next = Node(4)
+head.next.next.next = Node(3)
+head.next.next.next.next = Node(5)
+
+
+def print_linked_list(head):
+    current_node = head
+
+    while current_node is not None:
+        print(current_node.value)
+        current_node = current_node.next
+
+
+# print_linked_list(head)
+
+#------------------------------------------------------------
+
+def create_linked_list(input_list):
+    """
+    Function to create a linked list
+    @param input_list: a list of integers
+    @return: head node of the linked list
+    """
+    head = None
+    for value in input_list:
+        if head is None:
+            head = Node(value)
+        else:
+            current_node = head
+            while current_node.next:
+                current_node = current_node.next
+            current_node.next = Node(value)
+    return head
+
+
+### Test Code
+def test_function(input_list, head):
+    try:
+        if len(input_list) == 0:
+            if head is not None:
+                print("Fail")
+                return
+        for value in input_list:
+            if head.value != value:
+                print("Fail")
+                return
+            else:
+                head = head.next
+        print("Pass")
+    except Exception as e:
+        print("Fail: " + e)
+
+
+input_list = [1, 2, 3, 4, 5, 6]
+head = create_linked_list(input_list)
+test_function(input_list, head)
+
+input_list = [1]
+head = create_linked_list(input_list)
+test_function(input_list, head)
+
+input_list = []
+head = create_linked_list(input_list)
+test_function(input_list, head)
+
+# ---------------------------------------------------------------
+
+def create_linked_list_better(input_list):
+    head = None
+    tail = None
+    for value in input_list:
+        if head is None:
+            head = Node(value)
+            tail = head
+        else:
+            tail.next = Node(value)
+            tail = tail.next
+    # TODO: Implement the more efficient version that keeps track of the tail
+    return head
+
+
+### Test Code
+def test_function(input_list, head):
+    try:
+        if len(input_list) == 0:
+            if head is not None:
+                print("Fail")
+                return
+        for value in input_list:
+            if head.value != value:
+                print("Fail")
+                return
+            else:
+                head = head.next
+        print("Pass")
+    except Exception as e:
+        print("Fail: " + e)
+
+
+input_list = [1, 2, 3, 4, 5, 6]
+head = create_linked_list_better(input_list)
+test_function(input_list, head)
+
+input_list = [1]
+head = create_linked_list_better(input_list)
+test_function(input_list, head)
+
+input_list = []
+head = create_linked_list_better(input_list)
+test_function(input_list, head)
+
+# ---------------------------------------------------------------
+
Index: 10_StringReverser.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 10_StringReverser.py	(date 1557567271277)
+++ 10_StringReverser.py	(date 1557567271277)
@@ -0,0 +1,117 @@
+# Code
+
+def string_reverser(our_string):
+    """
+    Reverse the input string
+
+    Args:
+       our_string(string): String to be reversed
+    Returns:
+       string: The reversed string
+    """
+
+    # TODO: Write your solution here
+    str_index = len(our_string) - 1
+    new_str = ""
+
+    while str_index >= 0:
+        new_str += our_string[str_index]
+        str_index -= 1
+    return(new_str)
+
+
+# Test Cases
+
+# print ("Pass" if ('retaw' == string_reverser('water')) else "Fail")
+# print ("Pass" if ('!noitalupinam gnirts gnicitcarP' == string_reverser('Practicing string manipulation!')) else "Fail")
+# print ("Pass" if ('3432 :si edoc esuoh ehT' == string_reverser('The house code is: 2343')) else "Fail")
+
+
+# Code
+
+def anagram_checker(str1, str2):
+    """
+    Check if the input strings are anagrams of each other
+
+    Args:
+       str1(string),str2(string): Strings to be checked
+    Returns:
+       bool: Indicates whether strings are anagrams
+    """
+
+    # TODO: Write your solution here
+    str1 = (str1.lower().replace(" ", ""))
+    str2 = (str2.lower().replace(" ", ""))
+    if sorted(str1) == sorted(str2):
+        return True
+    else:
+        return False
+
+# Test Cases
+
+# print ("Pass" if not (anagram_checker('water','waiter')) else "Fail")
+# print ("Pass" if anagram_checker('Dormitory','Dirty room') else "Fail")
+# print ("Pass" if anagram_checker('Slot machines', 'Cash lost in me') else "Fail")
+# print ("Pass" if not (anagram_checker('A gentleman','Elegant men')) else "Fail")
+# print ("Pass" if anagram_checker('Time and tide wait for no man','Notified madman into water') else "Fail")
+
+# Code
+
+def word_flipper(our_string):
+    """
+    Flip the individual words in a sentence
+
+    Args:
+       our_string(string): String with words to flip
+    Returns:
+       string: String with words flipped
+    """
+
+    # TODO: Write your solution here
+    word_list = our_string.split(" ")
+    # print(word_list)
+    for idx, word in enumerate(word_list):
+        word_list[idx] = "".join(list(reversed(word)))
+    return " ".join(word_list)
+
+# Test Cases
+
+# print ("Pass" if ('retaw' == word_flipper('water')) else "Fail")
+# print ("Pass" if ('sihT si na elpmaxe' == word_flipper('This is an example')) else "Fail")
+# print ("Pass" if ('sihT si eno llams pets rof ...' == word_flipper('This is one small step for ...')) else "Fail")
+
+
+# Code
+
+def hamming_distance(str1, str2):
+    """
+    Calculate the hamming distance of the two strings
+
+    Args:
+       str1(string),str2(string): Strings to be used for finding the hamming distance
+    Returns:
+       int: Hamming Distance
+    """
+
+    # TODO: Write your solution here
+
+    if len(str1) == len(str2):
+        diffs = 0
+        for str1, str2 in zip(str1, str2):
+            if str1 != str2:
+                diffs += 1
+        return diffs
+    else:
+        return None
+
+# Test Cases
+
+print ("Pass" if (10 == hamming_distance('ACTTGACCGGG','GATCCGGTACA')) else "Fail")
+print ("Pass" if  (1 == hamming_distance('shove','stove')) else "Fail")
+print ("Pass" if  (None == hamming_distance('Slot machines', 'Cash lost in me')) else "Fail")
+print ("Pass" if  (9 == hamming_distance('A gentleman','Elegant men')) else "Fail")
+print ("Pass" if  (2 == hamming_distance('0101010100011101','0101010100010001')) else "Fail")
+
+
+
+
